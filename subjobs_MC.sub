#!/bin/bash
#SBATCH -o ./out_%j.out
#SBATCH -e ./err_%j.out
#SBATCH -J cycle_jobs
#SBATCH --partition=test,yao,shared,sapphire
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=32
#SBATCH --cpus-per-task=2
#SBATCH --mem=4G
###SBATCH --cpus-per-task=2
#SBATCH --mail-type=end
#SBATCH --mail-user=giovanni.canossa@physik.uni-muenchen.de
#SBATCH --time=04:00:00
#-output=/dev/null
#-error=/dev/null

module load gcc/12.2.0-fasrc01
#module load slurm_setup
module load python/3.10.9
module load openmpi/4.1.5-fasrc01
#source $HOME/.local/bin/activate
nodes=${SLURM_NNODES}
tasks=${SLURM_TASKS_PER_NODE}
# Define constants
L=5
disorder=0.100
timelimit=100000
therm=1000000
totsweeps=1000000
Nreplica=8
Nbins=500
T_Top=1.180
T_Top_PT=3.


nodis="true"		##decide whether to run 0dis sims
mul=5			##sweeps multiplicator of the 0dis sims
PT="true"		##decide whether to run PT sims

N_disorder_reps=1


# Path format for replica storage
pathformat='L_%d/p_%1.3f/%s/Seed_%d'


# Initialize random seeds
Seeds=($(shuf -i 1-1000000 -n $N_disorder_reps))
echo "Seeds: ${Seeds[@]}"

# Loop over seeds
for i in "${!Seeds[@]}"; do
    Seed=${Seeds[$i]}

    ## EVEN SIMS

    replica_path_e=$(printf "$pathformat" "$L" "$disorder" "even" "$i")
    mkdir -p "$replica_path_e"

    python genconfigs_MC.py --L "$L" --disorder "$disorder" --timelimit "$timelimit" --therm "$therm" --totsweeps "$totsweeps" --Nreplica "$Nreplica" --Nbins "$Nbins" --Seed "$Seed" --init "even" --replica_path "$replica_path_e"  --T_Top "$T_Top" --T_Top_PT "$T_Top_PT"

    cd "$replica_path_e"

    #        echo "1" > "PTval.txt"
    #        mpirun -n $Nreplica ../../../../build/2DRBI_MC "2DRBI.ini"
    echo "0" > "PTval.txt"
    mpirun -n $Nreplica ../../../../build/2DRBI_MC "2DRBI.ini"
    rm "PTval.txt"
    #        find "." -type f -name "*Ti_time*" -exec rm -f {} \;
    #        find "." -type f -name "*.data*" -exec rm -f {} \;
    #        find "." -type f -name "*config*" -exec rm -f {} \;
    #        find "." -type f -name "*timeseries.txt*" -exec rm -f {} \;

    cd "$OLDPWD"



    ## ODD SIMS

    replica_path_o=$(printf "$pathformat" "$L" "$disorder" "odd" "$i")
    mkdir -p "$replica_path_o"

    fini="$replica_path_e/2DRBI.ini"
    fpt="$replica_path_e/T-p_points.data"
    cp "$fini" "$replica_path_o"
    cp "$fpt" "$replica_path_o"

    for fdis in "$replica_path_e"/config_p*; do
        if [[ -f "$fdis" ]]; then
            # Copy the file to the target directory
            cp "$fdis" "$replica_path_o"
            copied_file="$replica_path_o/$(basename "$fdis")"

            # Use awk to flip the last L lines
            awk -v L="$L" '
            {
                lines[NR] = $0          # Store all lines
            }
            END {
                total_lines = NR
                for (i = 1; i <= total_lines; i++) {
                    if (i > total_lines - L) {  # Identify the last L lines
                        split(lines[i], a, " ")
                        # Flip each element in the line to its negative
                        for (j = 1; j <= length(a); j++) {
                            a[j] = -a[j]
                        }
                        print a[1], a[2]       # Adjust for two fields per line
                    } else {
		        print lines[i]
	            }
                }
            }' "$copied_file" > "$copied_file.tmp"

            # Replace the original copied file with the modified one
            mv "$copied_file.tmp" "$copied_file"

    fi
    done

    cd "$replica_path_o"
    echo "$replica_path_o"
    # Run the simulation and save output files in the respective folder
    #        echo "1" > "PTval.txt"
    #        mpirun -n $Nreplica ../../../../build/2DRBI_MC "2DRBI.ini"
    echo "0" > "PTval.txt"
    mpirun -n $Nreplica ../../../../build/2DRBI_MC "2DRBI.ini"
    rm "PTval.txt"
    #        find "." -type f -name "*Ti_time*" -exec rm -f {} \;
    #        find "." -type f -name "*.data*" -exec rm -f {} \;
    #        find "." -type f -name "*config*" -exec rm -f {} \;
    #        find "." -type f -name "*timeseries.txt*" -exec rm -f {} \;
    # Navigate back to root directory
    cd "$OLDPWD"



    ##   PT SIMS

    if [ "$PT" = "true" ];then
        f1="$replica_path_e/2DRBI.ini"
        f2="$replica_path_e/config_p.data"
        f3="$replica_path_e/T_points.data"
        PT_path=$(printf "$pathformat" "$L" "$disorder" "PT" "$i")

        mkdir -p "$PT_path"
        # Copy the file from replica_path to PT_path
        cp "$f1" "$PT_path"
        cp "$f2" "$PT_path"
        cp "$f3" "$PT_path"

        cd "$PT_path"
        echo "$PT_path"
        mpirun -n $Nreplica ../../../../build/2DRBI_PT "2DRBI.ini"
#        find "." -type f -name "*timeseries.txt*" -exec rm -f {} \;
#        find "." -type f -name "*Ti_time*" -exec rm -f {} \;

        cd "$OLDPWD"
    fi

done


# FINAL SIMULATION at 0 disorder
if [ "$nodis" = "true" ];then
	therm=$((therm*mul))
	totsweeps=$((totsweeps*mul))
	for init in "0dis"; do
        	replica_path=$(printf "$pathformat" "$L" "$disorder" "$init" "0")
	        mkdir -p "$replica_path"
        	seed=$(shuf -i 1-1000000 -n 1)
	        # Generate configuration and disorder value
        	python genconfigs_MC.py --L "$L" --disorder "$disorder" --timelimit "$timelimit" --therm "$therm" --totsweeps "$totsweeps" --Nreplica "$Nreplica" --Nbins "$Nbins" --Seed "$seed" --init "$init" --replica_path "$replica_path"  --T_Top "$T_Top" --T_Top_PT "$T_Top_PT"

	        cd "$replica_path"
        	echo "running final sim"
#        	echo "1" > "PTval.txt"
#        	mpirun -n $Nreplica ../../../../build/2DRBI "2DRBI.ini"
	        echo "0" > "PTval.txt"
        	mpirun -n $Nreplica ../../../../build/2DRBI_MC "2DRBI.ini"
		    rm "PTval.txt"
#       	 find "." -type f -name "*Ti_time*" -exec rm -f {} \;
#        	find "." -type f -name "*.data*" -exec rm -f {} \;
#        	find "." -type f -name "*config*" -exec rm -f {} \;

	        cd "$OLDPWD"
	done
fi

python datacollect.py --L "$L" --disorder "$disorder"

wait

